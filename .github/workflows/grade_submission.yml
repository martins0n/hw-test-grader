name: Grade Homework Submission

on:
  # Trigger on push to student branches
  push:
    branches:
      - 'student-*'

  # Trigger on pull requests from student branches
  pull_request:
    branches:
      - main
      - master
    types:
      - opened
      - synchronize
      - reopened

# Cancel in-progress runs for the same PR/branch to prevent multiple grading runs
concurrency:
  group: grade-${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  grade:
    runs-on: ubuntu-latest

    # Grant permissions to write comments on PRs
    permissions:
      contents: read
      pull-requests: write
      checks: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract student and assignment info
        id: extract_info
        run: |
          # Determine branch name from event type
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            BRANCH_NAME="${{ github.head_ref }}"
          else
            BRANCH_NAME="${GITHUB_REF#refs/heads/}"
          fi

          echo "branch=$BRANCH_NAME" >> $GITHUB_OUTPUT

          # Extract student ID and assignment name from branch name
          # Format: student-{student_email}/assignment-{assignment_name}
          STUDENT_ID=$(echo $BRANCH_NAME | sed 's/student-\([^/]*\).*/\1/')
          ASSIGNMENT_NAME=$(echo $BRANCH_NAME | sed 's/.*assignment-\(.*\)/\1/')

          echo "student_id=$STUDENT_ID" >> $GITHUB_OUTPUT
          echo "assignment_id=$ASSIGNMENT_NAME" >> $GITHUB_OUTPUT

          echo "Processing submission for Student: $STUDENT_ID, Assignment: $ASSIGNMENT_NAME"

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache Python environment
        uses: actions/cache@v4
        id: cache-venv
        with:
          path: ${{ env.pythonLocation }}
          key: ${{ runner.os }}-python-${{ env.pythonLocation }}-${{ hashFiles('requirements.txt') }}-${{ hashFiles(format('test_cases/{0}/requirements.txt', steps.extract_info.outputs.assignment_id)) }}

      - name: Install dependencies
        if: steps.cache-venv.outputs.cache-hit != 'true'
        env:
          ASSIGNMENT_ID: ${{ steps.extract_info.outputs.assignment_id }}
        run: |
          python -m pip install --upgrade pip

          # Install base requirements
          if [ -f requirements.txt ]; then
            echo "Installing base requirements..."
            pip install -r requirements.txt
          fi

          # Install assignment-specific requirements if they exist
          ASSIGNMENT_REQS="test_cases/${ASSIGNMENT_ID}/requirements.txt"
          if [ -f "$ASSIGNMENT_REQS" ]; then
            echo "Installing assignment-specific requirements from $ASSIGNMENT_REQS..."
            pip install -r "$ASSIGNMENT_REQS"
          else
            echo "No assignment-specific requirements found at $ASSIGNMENT_REQS"
          fi

      - name: Ensure Jupyter kernel
        run: |
          python -m ipykernel install --user --name python3 --display-name "Python 3"

      - name: Decrypt submission files
        env:
          STUDENT_ID: ${{ steps.extract_info.outputs.student_id }}
          ASSIGNMENT_ID: ${{ steps.extract_info.outputs.assignment_id }}
          ENCRYPTION_KEYS: ${{ secrets.ENCRYPTION_KEYS }}
          DEFAULT_ENCRYPTION_KEY: ${{ secrets.DEFAULT_ENCRYPTION_KEY }}
        run: |
          python scripts/decrypt_submission.py \
            --student-id "$STUDENT_ID" \
            --assignment-id "$ASSIGNMENT_ID"

      - name: Run grading tests
        id: grade
        env:
          STUDENT_ID: ${{ steps.extract_info.outputs.student_id }}
          ASSIGNMENT_ID: ${{ steps.extract_info.outputs.assignment_id }}
        run: |
          # Security: Clear encryption keys before running student notebooks
          unset ENCRYPTION_KEYS
          unset DEFAULT_ENCRYPTION_KEY

          python scripts/run_grader.py \
            --student-id "$STUDENT_ID" \
            --assignment-id "$ASSIGNMENT_ID" \
            --output reports/grade_report.json

      - name: Upload grading report
        uses: actions/upload-artifact@v4
        with:
          name: grading-report-${{ steps.extract_info.outputs.student_id }}-${{ steps.extract_info.outputs.assignment_id }}
          path: reports/grade_report.json

      - name: Send results
        if: always()
        env:
          STUDENT_ID: ${{ steps.extract_info.outputs.student_id }}
          ASSIGNMENT_ID: ${{ steps.extract_info.outputs.assignment_id }}
          GOOGLE_CREDENTIALS: ${{ secrets.GOOGLE_CREDENTIALS }}
        run: |
          python scripts/send_results.py \
            --student-id "$STUDENT_ID" \
            --assignment-id "$ASSIGNMENT_ID" \
            --report reports/grade_report.json

      - name: Comment on PR with results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const studentId = '${{ steps.extract_info.outputs.student_id }}';
            const assignmentId = '${{ steps.extract_info.outputs.assignment_id }}';

            let comment = '## ü§ñ Grading Results\n\n';
            comment += `**Student:** ${studentId}\n`;
            comment += `**Assignment:** ${assignmentId}\n`;
            comment += `**Status:** ${{ job.status }}\n\n`;

            // Try to read the grading report
            try {
              const report = fs.readFileSync('reports/grade_report.json', 'utf8');
              const results = JSON.parse(report);

              if (results.error) {
                comment += `### ‚ùå Error\n\`\`\`\n${results.error}\n\`\`\`\n`;
              } else {
                comment += `### Score: ${results.score.toFixed(2)}%\n\n`;
                comment += `**Matches:** ${results.matches}/${results.total_expected}\n\n`;

                if (results.mismatches && results.mismatches.length > 0) {
                  comment += `**Mismatches:** ${results.mismatches.length}\n`;
                }
                if (results.missing && results.missing.length > 0) {
                  comment += `**Missing outputs:** ${results.missing.length}\n`;
                }
              }
            } catch (error) {
              comment += '‚ö†Ô∏è Could not read grading report\n';
            }

            comment += '\n---\n';
            comment += 'üìä Full report available in workflow artifacts\n';

            // Post comment
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Log completion
        if: always()
        run: |
          echo "Grading completed for student ${{ steps.extract_info.outputs.student_id }}"
          echo "Assignment: ${{ steps.extract_info.outputs.assignment_id }}"
          echo "Status: ${{ job.status }}"
